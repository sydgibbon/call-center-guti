# Generated by Django 4.0.5 on 2022-11-19 15:00

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deviceid', models.CharField(max_length=255, unique=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('agenttypes_id', models.PositiveIntegerField()),
                ('last_contact', models.DateTimeField(blank=True, null=True)),
                ('version', models.CharField(blank=True, max_length=255, null=True)),
                ('locked', models.IntegerField()),
                ('itemtype', models.CharField(max_length=100)),
                ('items_id', models.PositiveIntegerField()),
                ('useragent', models.CharField(blank=True, max_length=255, null=True)),
                ('tag', models.CharField(blank=True, max_length=255, null=True)),
                ('port', models.CharField(blank=True, max_length=6, null=True)),
                ('threads_networkdiscovery', models.IntegerField()),
                ('threads_networkinventory', models.IntegerField()),
                ('timeout_networkdiscovery', models.IntegerField()),
                ('timeout_networkinventory', models.IntegerField()),
            ],
            options={
                'db_table': 'agents',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Calendars',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('cache_duration', models.TextField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'calendars',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Changes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('is_deleted', models.IntegerField()),
                ('status', models.IntegerField()),
                ('content', models.TextField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('solvedate', models.DateTimeField(blank=True, null=True)),
                ('closedate', models.DateTimeField(blank=True, null=True)),
                ('time_to_resolve', models.DateTimeField(blank=True, null=True)),
                ('users_id_recipient', models.PositiveIntegerField()),
                ('users_id_lastupdater', models.PositiveIntegerField()),
                ('urgency', models.IntegerField()),
                ('impact', models.IntegerField()),
                ('priority', models.IntegerField()),
                ('itilcategories_id', models.PositiveIntegerField()),
                ('impactcontent', models.TextField(blank=True, null=True)),
                ('controlistcontent', models.TextField(blank=True, null=True)),
                ('rolloutplancontent', models.TextField(blank=True, null=True)),
                ('backoutplancontent', models.TextField(blank=True, null=True)),
                ('checklistcontent', models.TextField(blank=True, null=True)),
                ('global_validation', models.IntegerField()),
                ('validation_percent', models.IntegerField()),
                ('actiontime', models.IntegerField()),
                ('begin_waiting_date', models.DateTimeField(blank=True, null=True)),
                ('waiting_duration', models.IntegerField()),
                ('close_delay_stat', models.IntegerField()),
                ('solve_delay_stat', models.IntegerField()),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'changes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Crontasklogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crontasks_id', models.PositiveIntegerField()),
                ('crontasklogs_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField()),
                ('state', models.IntegerField()),
                ('elapsed', models.FloatField()),
                ('volume', models.IntegerField()),
                ('content', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'crontasklogs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Domains',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('domaintypes_id', models.PositiveIntegerField()),
                ('date_expiration', models.DateTimeField(blank=True, null=True)),
                ('date_domaincreation', models.DateTimeField(blank=True, null=True)),
                ('users_id_tech', models.PositiveIntegerField()),
                ('groups_id_tech', models.PositiveIntegerField()),
                ('is_deleted', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('is_template', models.IntegerField()),
                ('template_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.IntegerField()),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'domains',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items_id', models.PositiveIntegerField()),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('service', models.CharField(blank=True, max_length=255, null=True)),
                ('level', models.IntegerField()),
                ('message', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'events',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('ldap_field', models.CharField(blank=True, max_length=255, null=True)),
                ('ldap_value', models.TextField(blank=True, null=True)),
                ('ldap_group_dn', models.TextField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('groups_id', models.PositiveIntegerField()),
                ('completename', models.TextField(blank=True, null=True)),
                ('level', models.IntegerField()),
                ('ancestors_cache', models.TextField(blank=True, null=True)),
                ('sons_cache', models.TextField(blank=True, null=True)),
                ('is_requester', models.IntegerField()),
                ('is_watcher', models.IntegerField()),
                ('is_assign', models.IntegerField()),
                ('is_task', models.IntegerField()),
                ('is_notify', models.IntegerField()),
                ('is_itemgroup', models.IntegerField()),
                ('is_usergroup', models.IntegerField()),
                ('is_manager', models.IntegerField()),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupsKnowbaseitems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('knowbaseitems_id', models.PositiveIntegerField()),
                ('groups_id', models.PositiveIntegerField()),
                ('entities_id', models.PositiveIntegerField(blank=True, null=True)),
                ('is_recursive', models.IntegerField()),
                ('no_entity_restriction', models.IntegerField()),
            ],
            options={
                'db_table': 'groups_knowbaseitems',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupsReminders',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reminders_id', models.PositiveIntegerField()),
                ('groups_id', models.PositiveIntegerField()),
                ('entities_id', models.PositiveIntegerField(blank=True, null=True)),
                ('is_recursive', models.IntegerField()),
                ('no_entity_restriction', models.IntegerField()),
            ],
            options={
                'db_table': 'groups_reminders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupsRssfeeds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rssfeeds_id', models.PositiveIntegerField()),
                ('groups_id', models.PositiveIntegerField()),
                ('entities_id', models.PositiveIntegerField(blank=True, null=True)),
                ('is_recursive', models.IntegerField()),
                ('no_entity_restriction', models.IntegerField()),
            ],
            options={
                'db_table': 'groups_rssfeeds',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Logs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemtype', models.CharField(max_length=100)),
                ('items_id', models.PositiveIntegerField()),
                ('itemtype_link', models.CharField(max_length=100)),
                ('linked_action', models.IntegerField()),
                ('user_name', models.CharField(blank=True, max_length=255, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('id_search_option', models.IntegerField()),
                ('old_value', models.CharField(blank=True, max_length=255, null=True)),
                ('new_value', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'logs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Planningeventcategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('color', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'planningeventcategories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Planningexternalevents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('planningexternaleventtemplates_id', models.PositiveIntegerField()),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('users_id', models.PositiveIntegerField()),
                ('users_id_guests', models.TextField(blank=True, null=True)),
                ('groups_id', models.PositiveIntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('begin', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('rrule', models.TextField(blank=True, null=True)),
                ('state', models.IntegerField()),
                ('planningeventcategories_id', models.PositiveIntegerField()),
                ('background', models.IntegerField()),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'planningexternalevents',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Planningexternaleventtemplates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entities_id', models.PositiveIntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('duration', models.IntegerField()),
                ('before_time', models.IntegerField()),
                ('rrule', models.TextField(blank=True, null=True)),
                ('state', models.IntegerField()),
                ('planningeventcategories_id', models.PositiveIntegerField()),
                ('background', models.IntegerField()),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'planningexternaleventtemplates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Problems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('is_deleted', models.IntegerField()),
                ('status', models.IntegerField()),
                ('content', models.TextField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('solvedate', models.DateTimeField(blank=True, null=True)),
                ('closedate', models.DateTimeField(blank=True, null=True)),
                ('time_to_resolve', models.DateTimeField(blank=True, null=True)),
                ('users_id_recipient', models.PositiveIntegerField()),
                ('users_id_lastupdater', models.PositiveIntegerField()),
                ('urgency', models.IntegerField()),
                ('impact', models.IntegerField()),
                ('priority', models.IntegerField()),
                ('itilcategories_id', models.PositiveIntegerField()),
                ('impactcontent', models.TextField(blank=True, null=True)),
                ('causecontent', models.TextField(blank=True, null=True)),
                ('symptomcontent', models.TextField(blank=True, null=True)),
                ('actiontime', models.IntegerField()),
                ('begin_waiting_date', models.DateTimeField(blank=True, null=True)),
                ('waiting_duration', models.IntegerField()),
                ('close_delay_stat', models.IntegerField()),
                ('solve_delay_stat', models.IntegerField()),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'problems',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Recurrentchanges',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('changetemplates_id', models.PositiveIntegerField()),
                ('begin_date', models.DateTimeField(blank=True, null=True)),
                ('periodicity', models.CharField(blank=True, max_length=255, null=True)),
                ('create_before', models.IntegerField()),
                ('next_creation_date', models.DateTimeField(blank=True, null=True)),
                ('calendars_id', models.PositiveIntegerField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'recurrentchanges',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ticketcosts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('begin_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('actiontime', models.IntegerField()),
                ('cost_time', models.DecimalField(decimal_places=4, max_digits=20)),
                ('cost_fixed', models.DecimalField(decimal_places=4, max_digits=20)),
                ('cost_material', models.DecimalField(decimal_places=4, max_digits=20)),
                ('budgets_id', models.PositiveIntegerField()),
                ('entities_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'ticketcosts',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ticketrecurrents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('tickettemplates_id', models.PositiveIntegerField()),
                ('begin_date', models.DateTimeField(blank=True, null=True)),
                ('periodicity', models.CharField(blank=True, max_length=255, null=True)),
                ('create_before', models.IntegerField()),
                ('next_creation_date', models.DateTimeField(blank=True, null=True)),
                ('calendars_id', models.PositiveIntegerField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ticketrecurrents',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entities_id', models.PositiveIntegerField()),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('closedate', models.DateTimeField(blank=True, null=True)),
                ('solvedate', models.DateTimeField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('users_id_lastupdater', models.PositiveIntegerField()),
                ('status', models.IntegerField()),
                ('users_id_recipient', models.PositiveIntegerField()),
                ('requesttypes_id', models.PositiveIntegerField()),
                ('content', models.TextField(blank=True, null=True)),
                ('urgency', models.IntegerField()),
                ('impact', models.IntegerField()),
                ('priority', models.IntegerField()),
                ('itilcategories_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
                ('global_validation', models.IntegerField()),
                ('slas_id_ttr', models.PositiveIntegerField()),
                ('slas_id_tto', models.PositiveIntegerField()),
                ('slalevels_id_ttr', models.PositiveIntegerField()),
                ('time_to_resolve', models.DateTimeField(blank=True, null=True)),
                ('time_to_own', models.DateTimeField(blank=True, null=True)),
                ('begin_waiting_date', models.DateTimeField(blank=True, null=True)),
                ('sla_waiting_duration', models.IntegerField()),
                ('ola_waiting_duration', models.IntegerField()),
                ('olas_id_tto', models.PositiveIntegerField()),
                ('olas_id_ttr', models.PositiveIntegerField()),
                ('olalevels_id_ttr', models.PositiveIntegerField()),
                ('ola_ttr_begin_date', models.DateTimeField(blank=True, null=True)),
                ('internal_time_to_resolve', models.DateTimeField(blank=True, null=True)),
                ('internal_time_to_own', models.DateTimeField(blank=True, null=True)),
                ('waiting_duration', models.IntegerField()),
                ('close_delay_stat', models.IntegerField()),
                ('solve_delay_stat', models.IntegerField()),
                ('takeintoaccount_delay_stat', models.IntegerField()),
                ('actiontime', models.IntegerField()),
                ('is_deleted', models.IntegerField()),
                ('locations_id', models.PositiveIntegerField()),
                ('validation_percent', models.IntegerField()),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tickets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ticketsatisfactions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField(unique=True)),
                ('type', models.IntegerField()),
                ('date_begin', models.DateTimeField(blank=True, null=True)),
                ('date_answered', models.DateTimeField(blank=True, null=True)),
                ('satisfaction', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ticketsatisfactions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tickettasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('tickets_id', models.PositiveIntegerField()),
                ('taskcategories_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('users_id', models.PositiveIntegerField()),
                ('users_id_editor', models.PositiveIntegerField()),
                ('content', models.TextField(blank=True, null=True)),
                ('is_private', models.IntegerField()),
                ('actiontime', models.IntegerField()),
                ('begin', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('state', models.IntegerField()),
                ('users_id_tech', models.PositiveIntegerField()),
                ('groups_id_tech', models.PositiveIntegerField()),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
                ('tasktemplates_id', models.PositiveIntegerField()),
                ('timeline_position', models.IntegerField()),
                ('sourceitems_id', models.PositiveIntegerField()),
                ('sourceof_items_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'tickettasks',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tickettemplatepredefinedfields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickettemplates_id', models.PositiveIntegerField()),
                ('num', models.IntegerField()),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tickettemplatepredefinedfields',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tickettemplates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('entities_id', models.PositiveIntegerField()),
                ('is_recursive', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tickettemplates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ticketvalidations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entities_id', models.PositiveIntegerField()),
                ('users_id', models.PositiveIntegerField()),
                ('tickets_id', models.PositiveIntegerField()),
                ('users_id_validate', models.PositiveIntegerField()),
                ('comment_submission', models.TextField(blank=True, null=True)),
                ('comment_validation', models.TextField(blank=True, null=True)),
                ('status', models.IntegerField()),
                ('submission_date', models.DateTimeField(blank=True, null=True)),
                ('validation_date', models.DateTimeField(blank=True, null=True)),
                ('timeline_position', models.IntegerField()),
            ],
            options={
                'db_table': 'ticketvalidations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('password_last_update', models.DateTimeField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('phone2', models.CharField(blank=True, max_length=255, null=True)),
                ('mobile', models.CharField(blank=True, max_length=255, null=True)),
                ('realname', models.CharField(blank=True, max_length=255, null=True)),
                ('firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('locations_id', models.PositiveIntegerField()),
                ('language', models.CharField(blank=True, max_length=10, null=True)),
                ('use_mode', models.IntegerField()),
                ('list_limit', models.IntegerField(blank=True, null=True)),
                ('is_active', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('auths_id', models.PositiveIntegerField()),
                ('authtype', models.IntegerField()),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_sync', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.IntegerField()),
                ('profiles_id', models.PositiveIntegerField()),
                ('entities_id', models.PositiveIntegerField()),
                ('usertitles_id', models.PositiveIntegerField()),
                ('usercategories_id', models.PositiveIntegerField()),
                ('date_format', models.IntegerField(blank=True, null=True)),
                ('number_format', models.IntegerField(blank=True, null=True)),
                ('names_format', models.IntegerField(blank=True, null=True)),
                ('csv_delimiter', models.CharField(blank=True, max_length=1, null=True)),
                ('is_ids_visible', models.IntegerField(blank=True, null=True)),
                ('use_flat_dropdowntree', models.IntegerField(blank=True, null=True)),
                ('show_jobs_at_login', models.IntegerField(blank=True, null=True)),
                ('priority_1', models.CharField(blank=True, max_length=20, null=True)),
                ('priority_2', models.CharField(blank=True, max_length=20, null=True)),
                ('priority_3', models.CharField(blank=True, max_length=20, null=True)),
                ('priority_4', models.CharField(blank=True, max_length=20, null=True)),
                ('priority_5', models.CharField(blank=True, max_length=20, null=True)),
                ('priority_6', models.CharField(blank=True, max_length=20, null=True)),
                ('followup_private', models.IntegerField(blank=True, null=True)),
                ('task_private', models.IntegerField(blank=True, null=True)),
                ('default_requesttypes_id', models.PositiveIntegerField(blank=True, null=True)),
                ('password_forget_token', models.CharField(blank=True, max_length=40, null=True)),
                ('password_forget_token_date', models.DateTimeField(blank=True, null=True)),
                ('user_dn', models.TextField(blank=True, null=True)),
                ('registration_number', models.CharField(blank=True, max_length=255, null=True)),
                ('show_count_on_tabs', models.IntegerField(blank=True, null=True)),
                ('refresh_views', models.IntegerField(blank=True, null=True)),
                ('set_default_tech', models.IntegerField(blank=True, null=True)),
                ('personal_token', models.CharField(blank=True, max_length=255, null=True)),
                ('personal_token_date', models.DateTimeField(blank=True, null=True)),
                ('api_token', models.CharField(blank=True, max_length=255, null=True)),
                ('api_token_date', models.DateTimeField(blank=True, null=True)),
                ('cookie_token', models.CharField(blank=True, max_length=255, null=True)),
                ('cookie_token_date', models.DateTimeField(blank=True, null=True)),
                ('display_count_on_home', models.IntegerField(blank=True, null=True)),
                ('notification_to_myself', models.IntegerField(blank=True, null=True)),
                ('duedateok_color', models.CharField(blank=True, max_length=255, null=True)),
                ('duedatewarning_color', models.CharField(blank=True, max_length=255, null=True)),
                ('duedatecritical_color', models.CharField(blank=True, max_length=255, null=True)),
                ('duedatewarning_less', models.IntegerField(blank=True, null=True)),
                ('duedatecritical_less', models.IntegerField(blank=True, null=True)),
                ('duedatewarning_unit', models.CharField(blank=True, max_length=255, null=True)),
                ('duedatecritical_unit', models.CharField(blank=True, max_length=255, null=True)),
                ('display_options', models.TextField(blank=True, null=True)),
                ('is_deleted_ldap', models.IntegerField()),
                ('pdffont', models.CharField(blank=True, max_length=255, null=True)),
                ('picture', models.CharField(blank=True, max_length=255, null=True)),
                ('begin_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('keep_devices_when_purging_item', models.IntegerField(blank=True, null=True)),
                ('privatebookmarkorder', models.TextField(blank=True, null=True)),
                ('backcreated', models.IntegerField(blank=True, null=True)),
                ('task_state', models.IntegerField(blank=True, null=True)),
                ('palette', models.CharField(blank=True, max_length=20, null=True)),
                ('page_layout', models.CharField(blank=True, max_length=20, null=True)),
                ('fold_menu', models.IntegerField(blank=True, null=True)),
                ('fold_search', models.IntegerField(blank=True, null=True)),
                ('savedsearches_pinned', models.TextField(blank=True, null=True)),
                ('timeline_order', models.CharField(blank=True, max_length=20, null=True)),
                ('itil_layout', models.TextField(blank=True, null=True)),
                ('richtext_layout', models.CharField(blank=True, max_length=20, null=True)),
                ('set_default_requester', models.IntegerField(blank=True, null=True)),
                ('lock_autolock_mode', models.IntegerField(blank=True, null=True)),
                ('lock_directunlock_notification', models.IntegerField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
                ('highcontrast_css', models.IntegerField(blank=True, null=True)),
                ('plannings', models.TextField(blank=True, null=True)),
                ('sync_field', models.CharField(blank=True, max_length=255, null=True)),
                ('groups_id', models.PositiveIntegerField()),
                ('users_id_supervisor', models.PositiveIntegerField()),
                ('timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('default_dashboard_central', models.CharField(blank=True, max_length=100, null=True)),
                ('default_dashboard_assets', models.CharField(blank=True, max_length=100, null=True)),
                ('default_dashboard_helpdesk', models.CharField(blank=True, max_length=100, null=True)),
                ('default_dashboard_mini_ticket', models.CharField(blank=True, max_length=100, null=True)),
                ('default_central_tab', models.IntegerField(blank=True, null=True)),
                ('nickname', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'users',
                'managed': True,
                'unique_together': {('name', 'authtype', 'auths_id')},
            },
        ),
        migrations.CreateModel(
            name='Tickettemplatemandatoryfields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickettemplates_id', models.PositiveIntegerField()),
                ('num', models.IntegerField()),
            ],
            options={
                'db_table': 'tickettemplatemandatoryfields',
                'managed': True,
                'unique_together': {('tickettemplates_id', 'num')},
            },
        ),
        migrations.CreateModel(
            name='Tickettemplatehiddenfields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickettemplates_id', models.PositiveIntegerField()),
                ('num', models.IntegerField()),
            ],
            options={
                'db_table': 'tickettemplatehiddenfields',
                'managed': True,
                'unique_together': {('tickettemplates_id', 'num')},
            },
        ),
        migrations.CreateModel(
            name='TicketsUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('users_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
                ('use_notification', models.IntegerField()),
                ('alternative_email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'tickets_users',
                'managed': True,
                'unique_together': {('tickets_id', 'type', 'users_id', 'alternative_email')},
            },
        ),
        migrations.CreateModel(
            name='TicketsTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id_1', models.PositiveIntegerField()),
                ('tickets_id_2', models.PositiveIntegerField()),
                ('link', models.IntegerField()),
            ],
            options={
                'db_table': 'tickets_tickets',
                'managed': True,
                'unique_together': {('tickets_id_1', 'tickets_id_2')},
            },
        ),
        migrations.CreateModel(
            name='TicketsContracts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('contracts_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'tickets_contracts',
                'managed': True,
                'unique_together': {('tickets_id', 'contracts_id')},
            },
        ),
        migrations.CreateModel(
            name='SuppliersTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('suppliers_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
                ('use_notification', models.IntegerField()),
                ('alternative_email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'suppliers_tickets',
                'managed': True,
                'unique_together': {('tickets_id', 'type', 'suppliers_id')},
            },
        ),
        migrations.CreateModel(
            name='SlalevelsTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('slalevels_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'slalevels_tickets',
                'managed': True,
                'unique_together': {('tickets_id', 'slalevels_id')},
            },
        ),
        migrations.CreateModel(
            name='ProjecttasksTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('projecttasks_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'projecttasks_tickets',
                'managed': True,
                'unique_together': {('tickets_id', 'projecttasks_id')},
            },
        ),
        migrations.CreateModel(
            name='ProblemsUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problems_id', models.PositiveIntegerField()),
                ('users_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
                ('use_notification', models.IntegerField()),
                ('alternative_email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'problems_users',
                'managed': True,
                'unique_together': {('problems_id', 'type', 'users_id', 'alternative_email')},
            },
        ),
        migrations.CreateModel(
            name='ProblemsTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problems_id', models.PositiveIntegerField()),
                ('tickets_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'problems_tickets',
                'managed': True,
                'unique_together': {('problems_id', 'tickets_id')},
            },
        ),
        migrations.CreateModel(
            name='Planningrecalls',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('items_id', models.PositiveIntegerField()),
                ('itemtype', models.CharField(max_length=100)),
                ('users_id', models.PositiveIntegerField()),
                ('before_time', models.IntegerField()),
                ('when', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'planningrecalls',
                'managed': True,
                'unique_together': {('itemtype', 'items_id', 'users_id')},
            },
        ),
        migrations.CreateModel(
            name='OlalevelsTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('olalevels_id', models.PositiveIntegerField()),
                ('date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'olalevels_tickets',
                'managed': True,
                'unique_together': {('tickets_id', 'olalevels_id')},
            },
        ),
        migrations.CreateModel(
            name='ItemsTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemtype', models.CharField(blank=True, max_length=255, null=True)),
                ('items_id', models.PositiveIntegerField()),
                ('tickets_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'items_tickets',
                'managed': True,
                'unique_together': {('itemtype', 'items_id', 'tickets_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupsUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('users_id', models.PositiveIntegerField()),
                ('groups_id', models.PositiveIntegerField()),
                ('is_dynamic', models.IntegerField()),
                ('is_manager', models.IntegerField()),
                ('is_userdelegate', models.IntegerField()),
            ],
            options={
                'db_table': 'groups_users',
                'managed': True,
                'unique_together': {('users_id', 'groups_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupsTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tickets_id', models.PositiveIntegerField()),
                ('groups_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
            ],
            options={
                'db_table': 'groups_tickets',
                'managed': True,
                'unique_together': {('tickets_id', 'type', 'groups_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupsProblems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problems_id', models.PositiveIntegerField()),
                ('groups_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
            ],
            options={
                'db_table': 'groups_problems',
                'managed': True,
                'unique_together': {('problems_id', 'type', 'groups_id')},
            },
        ),
        migrations.CreateModel(
            name='Crontasks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemtype', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=150)),
                ('frequency', models.IntegerField()),
                ('param', models.IntegerField(blank=True, null=True)),
                ('state', models.IntegerField()),
                ('mode', models.IntegerField()),
                ('allowmode', models.IntegerField()),
                ('hourmin', models.IntegerField()),
                ('hourmax', models.IntegerField()),
                ('logs_lifetime', models.IntegerField()),
                ('lastrun', models.DateTimeField(blank=True, null=True)),
                ('lastcode', models.IntegerField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('date_mod', models.DateTimeField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'crontasks',
                'managed': True,
                'unique_together': {('itemtype', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ChangesUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changes_id', models.PositiveIntegerField()),
                ('users_id', models.PositiveIntegerField()),
                ('type', models.IntegerField()),
                ('use_notification', models.IntegerField()),
                ('alternative_email', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'changes_users',
                'managed': True,
                'unique_together': {('changes_id', 'type', 'users_id', 'alternative_email')},
            },
        ),
        migrations.CreateModel(
            name='ChangesTickets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changes_id', models.PositiveIntegerField()),
                ('tickets_id', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'changes_tickets',
                'managed': True,
                'unique_together': {('changes_id', 'tickets_id')},
            },
        ),
    ]
